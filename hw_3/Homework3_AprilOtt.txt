Homework #3
Your name: April Ott


---------------------------------------- Question 1 Query ----------------------------------------

//Find number of rentals with a rental price of 4.99

SELECT count(*) FROM film WHERE rental_rate = 4.99;

---------------------------------------- Question 1 Results ----------------------------------------

-------
   336
(1 row)

---------------------------------------- Question 2 Query ----------------------------------------
//Create an alphabetical listing (last name, first name) of all inactive customers

SELECT last_name, first_name FROM customer WHERE active = 0 ORDER BY (last_name, first_name);
---------------------------------------- Question 2 Results ----------------------------------------

last_name | first_name
-----------+------------
ARCE      | HARRY
COX       | JUDITH
CRAWLEY   | MAURICE
CULP      | THEODORE
EASTER    | BEN
EGGLESTON | JIMMIE
GOODEN    | KENNETH
JUNG      | CHRISTIAN
LARSON    | HEIDI
MARTIN    | SANDRA
MATTHEWS  | ERICA
NEAL      | PENNY
ROUSH     | TERRANCE
RUNYON    | NATHAN
WELLS     | SHEILA
(15 rows)

---------------------------------------- Question 3 Query ----------------------------------------

//Print the payment_id, amount, and payment_date of the most
//expensive payment(s) in the payments table. (10 rows)

SELECT payment_id, amount, payment_date FROM payment ORDER BY amount DESC LIMIT 10;


---------------------------------------- Question 3 Results ----------------------------------------

payment_id | amount |         payment_date
------------+--------+-------------------------------
		 24866 |  11.99 | 2017-03-02 20:46:39.996577-07
		 28814 |  11.99 | 2017-04-06 21:26:57.996577-06
		 23757 |  11.99 | 2017-03-21 22:02:26.996577-06
		 24553 |  11.99 | 2017-03-23 20:47:59.996577-06
		 17354 |  11.99 | 2017-02-17 22:19:47.996577-07
		 28799 |  11.99 | 2017-04-07 19:14:17.996577-06
		 20403 |  11.99 | 2017-03-21 21:57:24.996577-06
		 22650 |  11.99 | 2017-03-22 22:17:22.996577-06
		 17055 |  11.99 | 2017-01-25 16:46:45.996577-07
		 29136 |  11.99 | 2017-04-29 21:06:07.996577-06
(10 rows)

---------------------------------------- Question 4 Query ----------------------------------------

//Count the number of films spoken in English. You must not hard code English's language_code.
//Give two solutions for this problem: the first using a subquery and the second using a join of tables.


SELECT COUNT(*) FROM film WHERE language_id = ((SELECT language_id FROM language WHERE name='English'));

SELECT COUNT(*) FROM (SELECT film_hold.film_id, film_hold.language_id, language.name
	FROM film film_hold INNER JOIN "language" language ON film_hold.language_id = language.language_id
	WHERE language.name = 'English') AS join_table;

---------------------------------------- Question 4 Results ----------------------------------------
count
-------
 1000
(1 row)

count
-------
 1000
(1 row)


---------------------------------------- Question 5 Query ----------------------------------------

SELECT COUNT(film_id) occurrences FROM inventory GROUP BY film_id HAVING COUNT(film_id) >0 ORDER BY occurrences DESC LIMIT 1;
---------------------------------------- Question 5 Results ----------------------------------------

occurrences
-------------
					8
(1 row)


---------------------------------------- Question 6 Query ----------------------------------------

For each customer in the payment table, print their customer_id and the sum of all of their payment
 amounts as Total_Amount only for the newest customers whose customer_id is greater than 500.

 SELECT customer_id, SUM(amount) Total_Amount  FROM payment WHERE customer_id > 500
 	GROUP BY customer_id ORDER BY customer_id ASC;

---------------------------------------- Question 6 Results ----------------------------------------

customer_id | total_amount
-------------+--------------
501 |        89.79
502 |       138.66
503 |       115.68
504 |       133.72
505 |        97.79
506 |       152.65
507 |        95.75
508 |       127.75
509 |       100.80
510 |       122.74
511 |        99.76
512 |       115.74
513 |       148.69
514 |        74.78
515 |       126.72
516 |        98.74
517 |       105.75
518 |       111.74
519 |       103.77
520 |       134.68
521 |        80.77
522 |       167.67
523 |        93.78
524 |        87.81
525 |        74.81
526 |       221.55
527 |        81.76
528 |       111.75
529 |       118.71
530 |        76.77
531 |       118.75
532 |       152.68
		533 |       141.67
		534 |        88.76
		535 |       135.68
		536 |       117.75
		537 |       103.75
		538 |       117.71
		539 |        90.78
		540 |       112.76
		541 |       108.76
		542 |        94.82
		543 |        82.78
		544 |        98.78
		545 |        89.79
		546 |       107.74
		547 |        99.77
		548 |        79.81
		549 |        77.80
		550 |       159.68
		551 |        96.74
		552 |        90.79
		553 |       107.76
		554 |       101.78
		555 |        74.83
		556 |        83.79
		557 |        73.76
		558 |       135.72
		559 |       110.72
		560 |       132.70
		561 |        96.73
		562 |       109.75
			 563 |       110.71
			 564 |        91.76
			 565 |       126.71
			 566 |       141.66
			 567 |        85.80
			 568 |        66.79
			 569 |       134.68
			 570 |        99.74
			 571 |       121.76
			 572 |       108.75
			 573 |       120.71
			 574 |       109.72
			 575 |       126.71
			 576 |       139.66
			 577 |       118.72
			 578 |        96.78
			 579 |       111.73
			 580 |        99.73
			 581 |       107.73
			 582 |       113.75
			 583 |       117.77
			 584 |       129.70
			 585 |       117.76
			 586 |        64.81
			 587 |       108.74
			 588 |       115.71
			 589 |       129.72
			 590 |       112.75
			 591 |       134.73
			 592 |       111.71
			 593 |       113.74
			 594 |       130.73
		595 |       117.70
		596 |        96.72
		597 |        99.75
		598 |        83.78
		599 |        83.81
(99 rows)




---------------------------------------- Question 7 Query ----------------------------------------

//Print the total sales (payment.amount) for movies based on category

SELECT category_id, SUM(amount) Total_sales FROM(SELECT film_cat.category_id, films.film_id, our_inventory.inventory_id,
 rent.rental_id, pay.amount FROM rental rent

 INNER JOIN payment pay ON rent.rental_id = pay.rental_id

INNER JOIN inventory our_inventory ON rent.inventory_id = our_inventory.inventory_id

INNER JOIN film films ON our_inventory.film_id = films.film_id
INNER JOIN film_category film_cat ON films.film_id = films.film_id) AS joined_table
GROUP BY category_id ORDER BY category_id ASC;






---------------------------------------- Question 7 Results ----------------------------------------

category_id | total_sales
-------------+-------------
					1 |  4314656.64
					2 |  4449489.66
					3 |  4044990.60
					4 |  3842741.07
					5 |  3910157.58
					6 |  4584322.68
					7 |  4179823.62
					8 |  4651739.19
					9 |  4921405.23
				 10 |  4112407.11
				 11 |  3775324.56
				 12 |  3438242.01
				 13 |  4247240.13
				 14 |  4112407.11
				 15 |  4988821.74
				 16 |  3842741.07
(16 rows)

---------------------------------------- Question 8 Query ----------------------------------------

//Find number of rentals made by user with first name: JOHN last name: FARNSWORTH

SELECT Count(*) FROM payment WHERE customer_id=(SELECT customer_id FROM customer WHERE first_name = 'JOHN' AND last_name = 'FARNSWORTH');
---------------------------------------- Question 8 Results ----------------------------------------

count
-------
	 31
(1 row)


---------------------------------------- Question 9 Query ----------------------------------------

//Find number of rentals that were paid for before Jan 27, 2017

SELECT Count(*) FROM payment WHERE payment_date < '2017-01-27';

---------------------------------------- Question 9 Results ----------------------------------------

count
-------
	328
(1 row)

---------------------------------------- Question 10 Query ----------------------------------------

//Create a NEW table named short_films with the following items:
//film_id (integer), title (varchar(40), length (integer), replacement_cost (decimal(9,2)),
//and rating (varchar(5)). None of these columns can be null. Include a PRIMARY KEY constraint on film_id.

CREATE TABLE short_films(film_id int NOT NULL, title varchar(40)  NOT NULL, length int  NOT NULL, replacement_cost decimal(9,2)  NOT NULL,
 	rating varchar(5)  NOT NULL, PRIMARY KEY (film_id));

---------------------------------------- Question 11 Query ----------------------------------------

//Populate the table short_films with the films from the film table whose length is < 50
//. The column names correspond exactly.
 //This entails an INSERT with a SELECT query as the insert value.

INSERT INTO short_films(film_id, title, length, replacement_cost, rating)
SELECT film_id title length replacement_cost, rating FROM film WHERE film.length < 50;

---------------------------------------- Question 12 Query ----------------------------------------
//Delete the rows in short_films where the replacement_cost is more than 19.99.

DELETE FROM short_films WHERE replacement_cost > 19.99
---------------------------------------- Question 13 Query ----------------------------------------

//Add a new column to the short_films table called stars of type INT, with a default value of 5.

ALTER TABLE short_films ADD stars int DEFAULT 5;
---------------------------------------- Question 14 Query ----------------------------------------

//Alter the name of the length column in short_films to say 'length_min' and add a new column named
 //'length_sec' and fill it with the length in seconds of each movie.

 ALTER TABLE short_films RENAME COLUMN length to length_min;
 ALTER TABLE short_films ADD COLUMN length_sec int;
 	UPDATE short_films SET length_sec = (length_min * 60)
---------------------------------------- Question 15 Query ----------------------------------------

//Drop the short_films table.


										DROP TABLE short_films;
